<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java指令执行class文件]]></title>
    <url>%2F2018%2F08%2F20%2FJava%2Fjava%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8Cclass%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[java指令执行class文件 通过我们会通过IDE点击运行某个java中的main方法 或一个完整的jar 通过-cp指定main方法,但也有某种极端的情况下，我们需要使用 java 命令 执行某个编译过的java文件。 知识点梳理 java指令默认在寻找class文件的地址是通过CLASSPATH环境变量中指定的目录寻找，所以直接在CLASSPATH环境变量中加入.; CLASSPATH的值为 .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar java指定执行 class 文件，区分有无package包名 无包名存在12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("hello world!"); &#125;&#125; 执行过程12javac HelloWorld.javajava HelloWorld 有包名123456package com.examplepublic class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("hello world!"); &#125;&#125; 执行过程12javac -d . HelloWorld.javajava HelloWorld javac 参数： -d . 指定HelloWorld.java 编译生成的class 的文件存放路径,. 表示存放在当前路径 在ecplise的maven项目中如何手动执行java指令 先执行maven install 在target目录中 生成class文件 cmd 到 项目target的classes目录中(在classes当前路径下即可)，执行java指令，并 指定包名 java com.example.HelloWorld]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Overview]]></title>
    <url>%2F2018%2F08%2F17%2FSpringBoot%2FSpringBoot%E7%8B%AC%E7%99%BD%2F</url>
    <content type="text"><![CDATA[Spring Boot 独白简介&#160; &#160; &#160; &#160;随着动态语言的流行(Ruby,Groovy,Scala,Node.js), Java 的开发显得格外的笨重：繁多的配置，底下的开发项目，复杂的部署流程以及第三方技术集成难度大。&#160; &#160; &#160; &#160;在上述环境下，Spring boot 应运而生。它使用“习惯优于配置”(项目中大量的配置，此外还内置一个习惯性的配置，让你无需手动进行配置)的理念让你的项目快速运行起来。使用Spring Boot很容易创建一个独立运行(运行jar，内嵌Servlet容器)，准生产级别的基于Spring框架的项目，使用Spring Boot 你可以不用或者只需要很少的Spring 配置 特性 很容易基于Spring框架，创建独立运行的jar服务 直接嵌套Tomcat，jetty或Undertow(无需部署WAR文件) 提供模块化的依赖组件，简化项目构建及配置 尽可能自动配置Spring和第三方库 提供生产环境的监控功能,例如指标，运行状况检查和外部化配置]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何手动解压和重新打包jar]]></title>
    <url>%2F2018%2F07%2F26%2FJava%2F%E5%A6%82%E4%BD%95%E6%89%8B%E5%8A%A8%E8%A7%A3%E5%8E%8B%E5%92%8C%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85jar%2F</url>
    <content type="text"><![CDATA[如何手动解压和重新打包jar场景 在开发javaagent项目中，我们会在META-INF/MANIFEST.MF中设置一些相关的参数 解决过程我们可以使用maven-shade-plugin插件，在xml中配置Premain-Class标签，这样我们打好的jar包，META-INF/MANIFEST.MF文件就包含了Premain-Class值，而这次我想说的是，不使用插件情况下，我们如何手动操作，但这也不仅仅局限的解决修改META-INF/MANIFEST.MF文件的值，还有很多使用场景,后面会补充进来。 简单介绍下META-INF/MANIFEST.MF ，它会自动生成在你的jar里面,它包含jar的基本信息及运行环境。所以，你只需要解压jar就能看到。解压命令：1jar -xvf xxx.jar 接下来，我们在META-INF/MANIFEST.MF追加如下内容修改内容：123Premain-Class: geym.zbase.ch11.agent.PreMainTraceAgentCan-Redine-Classes: trueCan-Retransform-Classes: true 那这样，我们就直接打包就ok。 这 这里需要注意的地方：jar命令默认是不会使用原先的MANIFEST.MF文件的，意味着你的修改不会被生效，会重新生成一个默认的，所以我们如果想要保留原先的MANIFEST.MF文件必须指定，使用如下的命令指定原MF文件1jar -cvf xxx.jar(新包的名称) ./META-INF/MANIFEST.MF ./(路径)]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第11章-字节码执行]]></title>
    <url>%2F2018%2F07%2F23%2Fbooks%2FJava%2FJVM%2F%E5%AE%9E%E6%88%98Java%E8%99%9A%E6%8B%9F%E6%9C%BA-JVM%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F%E5%AE%9E%E6%88%98Java%E8%99%9A%E6%8B%9F%E6%9C%BA-JVM%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-11-%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[锚点 11.3 更上一层楼：再看ASM 11.3.1 为类增加安全控制 11.4 谁说Java太刻板：Java Agent运行时修改类 11.4.1 使用-javaagent 参数启动java虚拟机 11.4.2 使用Java Agent为函数增加计时功能 11.4.3 动态重转换类 11.4.4 有关Java Agent的总结 内容 11.3 更上一层楼：再看ASMCGLIB，其底层就是基于ASM的，而要用好ASM，了解Class文件结构和异常指令是必不可少。通过ASM的字节码操作，可以动态创建新的类型，可以为类增加新的功能。虽然使用CGLIB这些高级库也可以完成大量的工作，但是直接使用ASM还是大有好处，灵活度最高，功能也最为强大，可以将操作粒度定位到每一条指定。 11.3.1 为类增加安全控制现在有个账户类，可以进行某些操作： 12345public class Account &#123; public void operation() &#123; System.out.println("operation ..."); &#125;&#125; 目前，这个operation()方法没有任何控制手段，现在希望为operation()方法增加一些安全校验，以判断这个对象是否有权限执行这个方法，如果有，则执行该方法，如果没有，则直接退出，当然，这一切是要在不修改Account类源码的前提下进行的。 11.4 谁说Java太刻板：Java Agent运行时修改类&#160;&#160;&#160;&#160;在JDK1.5时，引入了java.lang.instrument包，该包提供了一些工具帮助开发人员在java程序运行时，动态修改系统中的Class类型。其中，使用该软件包的一个关键组件为Java Agent。从名字看，似乎可以理解成Java代理，而实际上，它的功能更像是Class类型的转换器，它可以在运行时接受程序外部请求，对Class类型进行修改。&#160;&#160;&#160;&#160;在命令行执行java，可以看到java命令的帮助，其中，不难发现有一个javaagent的选项。12-javaagent:&lt;jarpath&gt;[=&lt;options&gt;]加载Java 编程语言代理，请参阅 java.lang.instrument &#160;&#160;&#160;&#160;也就是说，Java程序在运行时，可以指定一个Java Agent作为其编程语言代理。 11.4.1 使用-javaagent 参数启动java虚拟机&#160;&#160;&#160;&#160;参数-javaagent可以用于指定一个jar包，并且对该jar包有如下要求: 这个jar包的MANIFEST.MF文件必须指定Premain-Class项。 Premain-Class指定的那个类必须实现Premain-Class项。 &#160;&#160;&#160;&#160;Premain-Class仅从英文单词字面上理解，就是运行在main()函数之前的类。当java虚拟机启动时，在执行main()函数之前，虚拟机会运行-javaagent所指定jar包内Premain-Class这个类的premain()方法，其中，premain()方法的签名如下：1public static void premain(String agentArgs,Instrumentation inst) &#160;&#160;&#160;&#160;其中，agentArgs是通过命令行传入给Java Agent的参数，inst提供了Java Class字节码转换的工具。Instrumentation类的常用API如下： void addTransformer(ClassFileTransformer transformer,boolean canRetransform)增加了一个Class文件的转换器，转换器用于改变Class二进制的数据，参数canRetransform设置是否允许重新转换。 void redefineClass(ClassDefinition… definitions)在类加载之前，重新定义Class文件。ClassDefinition表示对一个类新的定义。如果在类加载之后，需要使用retransformClasses()函数重新定义类。 boolean removeTransformer(ClassFileTransformer transformer)移除一个类转换器 void retransformClasses(Class&lt;?&gt;… classses)在类加载之后，重新定义Class。&#160;&#160;&#160;&#160;下面的例子定义了一个Java Agent，这个Agent打印出main()函数运行后，系统载入的类型。 1234567891011121314public class PreMainTraceAgent &#123; public static void premain(String agentArgs,Instrumentation inst) &#123; System.out.println("agentArgs:"+agentArgs); inst.addTransformer(new ClassFileTransformer() &#123; @Override public byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException &#123; System.out.println("load Class:" + className); return classfileBuffer; &#125; &#125;); &#125;&#125; &#160;&#160;&#160;&#160;上述代码第2行，定义了Agent的premain()方法，该方法会在main()函数执行前调用。&#160;&#160;&#160;&#160;代码第2行，打印了传递给Agent的参数。&#160;&#160;&#160;&#160;代码第5行，加入了一个类转换器，这里使用匿名内部类，定义了一个类转换器。这个类转换器很简单，只是简单地打印出获取的类名，不做实质性转换。&#160;&#160;&#160;&#160;代码第7行为类转化器接口的transform()方法，用于完成类的转换。该接口函数定义如下： 12byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException; 其中，loader为定义类的类加载器，className表示类的全限定名，比如“java/lang/String”。参数classBeingRedefined表示：如果是被重定义或重转换触发，则为重定义或重转换的类；如果是类加载，则为null。参数 protectionDomain 表示要定义或重定义的类的保护域。参数classfileBuffer表示类文件格式的二进制数据(只读，不能修改)。该函数的返回值为重新定义的新的类的二进制数据。将以上的Java Agent打包成jat.jar 。并设置META-INF/MANIFEST.MF文件如下：() 1234Manifes-Version: 1.0Premain-Class: geym.zbase.ch11.agent.PreMainTraceAgentCan-Redine-Classes: trueCan-Retransform-Classes: true 这就完成了一个保存有合法Java Agent的jar包。使用以下代码测试这个jat.jar:123456789101112131415161718public class Account &#123; public void operation() &#123; System.out.println("operation ..."); try &#123; Thread.sleep(10); &#125;catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;public class RunAccountMain &#123; public static void main(String[] args) &#123; Account account = new Account(); account.operation(); &#125;&#125; 使用Java虚拟机参数: -javaagent:path/jat.jar，输出如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253gentArgs:nullload Class:java/lang/invoke/MethodHandleImplload Class:java/lang/invoke/MethodHandleImpl$1load Class:java/lang/invoke/MethodHandleImpl$2load Class:java/util/function/Functionload Class:java/lang/invoke/MethodHandleImpl$3load Class:java/lang/invoke/MethodHandleImpl$4load Class:java/lang/ClassValueload Class:java/lang/ClassValue$Entryload Class:java/lang/ClassValue$Identityload Class:java/lang/ClassValue$Versionload Class:java/lang/invoke/MemberName$Factoryload Class:java/lang/invoke/MethodHandleStaticsload Class:java/lang/invoke/MethodHandleStatics$1load Class:sun/misc/PostVMInitHookload Class:sun/usagetracker/UsageTrackerClientload Class:java/util/concurrent/atomic/AtomicBooleanload Class:sun/usagetracker/UsageTrackerClient$1load Class:sun/usagetracker/UsageTrackerClient$4load Class:sun/usagetracker/UsageTrackerClient$2load Class:java/lang/ProcessEnvironmentload Class:java/lang/ProcessEnvironment$NameComparatorload Class:java/lang/ProcessEnvironment$EntryComparatorload Class:java/util/Collections$UnmodifiableMapload Class:java/util/TreeMapload Class:java/util/NavigableMapload Class:java/util/SortedMapload Class:java/lang/ProcessEnvironment$CheckedEntrySetload Class:java/util/HashMap$EntrySetload Class:java/lang/ProcessEnvironment$CheckedEntrySet$1load Class:java/util/HashMap$EntryIteratorload Class:java/util/HashMap$HashIteratorload Class:java/lang/ProcessEnvironment$CheckedEntryload Class:java/util/TreeMap$Entryload Class:sun/usagetracker/UsageTrackerClient$3load Class:java/lang/StringCodingload Class:java/lang/ThreadLocal$ThreadLocalMapload Class:java/lang/ThreadLocal$ThreadLocalMap$Entryload Class:java/lang/StringCoding$StringEncoderload Class:java/io/FileOutputStream$1load Class:sun/launcher/LauncherHelperload Class:sun/nio/cs/MS1252load Class:sun/nio/cs/SingleByteload Class:java/lang/StringCoding$StringDecoderload Class:sun/nio/cs/SingleByte$Decoderload Class:blog/java/SHI_ZHAN_JAVA_XU_NI_JI_JVM_GU_ZHANG_ZHENGDUAN_YU_XING_NENG_YOU_HUA/chapter11/RunAccountMainload Class:sun/launcher/LauncherHelper$FXHelperload Class:java/lang/Class$MethodArrayload Class:java/lang/Voidload Class:blog/java/SHI_ZHAN_JAVA_XU_NI_JI_JVM_GU_ZHANG_ZHENGDUAN_YU_XING_NENG_YOU_HUA/chapter11/Accountoperation ...load Class:java/lang/Shutdownload Class:java/lang/Shutdown$Lock 可以看到，PreMainTraceAgent已经可以正常工作了，这里所加载的类型，并非系统中所有的Class类。实际上，在jat.jar执行之前的所有已加载的类型都是无法捕获的。因此，大量的系统核心类会丢失，但是应用程序的类都在main()函数执行之后加载，因此都可以通过这种方式捕获。 11.4.2 使用Java Agent为函数增加计时功能之前已经通过ASM进行字节码织入，使Account.operation()方法具有计时功能。但提供的织入方式不够灵活，要求在Account类在进行javac编译后，再进行基于文件织入。这种做法虽然可行，但是过于繁琐。而有了Java Agent的支持，就可以大大改进这种方式。下面的代码展示了通过Java Agent直接进行字节码织入的方式。(别忘记pom添加asm相关的包) 12345&lt;dependency&gt; &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt; &lt;artifactId&gt;asm&lt;/artifactId&gt; &lt;version&gt;6.2&lt;/version&gt;&lt;/dependency&gt; 11.4.3 动态重转换类11.4.4 有关Java Agent的总结github]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>字节码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《实战Java虚拟机-JVM故障诊断与性能优化》]]></title>
    <url>%2F2018%2F07%2F23%2Fbooks%2FJava%2FJVM%2F%E5%AE%9E%E6%88%98Java%E8%99%9A%E6%8B%9F%E6%9C%BA-JVM%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F%E5%AE%9E%E6%88%98Java%E8%99%9A%E6%8B%9F%E6%9C%BA-JVM%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[目录 第11章-字节码执行]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BOOKS]]></title>
    <url>%2F2018%2F07%2F23%2Fbooks%2F</url>
    <content type="text"><![CDATA[@(阿洋)[2018 start] Java 《实战Java虚拟机-JVM故障诊断与性能优化》[2016年第3次印刷] 《Java性能权威指南》[2017年第5次印刷] Scala Python]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
